# Generic imports and setup
from configs import *

# Imports from this package
from reads          import *
from analy          import *
from utils          import *
from qc             import *
from plot_foraging  import *
from plot_lms       import *
from plots_other    import *

#---------------------------------  Subject Data Processing -----------------------------------#

# Read data, get basic foraging stats, QC
subj, grp = read_subjects(summary_only = True)      # Get subject data
grp = get_foraging_response_stats(subj, grp)        # Extract basic subject foraging behaviour

# Drop two bad subjects without enough trials, clearly not doing the task
droplist = np.where(grp['ntrials'] < 15)[0]
subj, grp = drop_subjects(subj, grp, droplist, reset_index=True)

# Get linear models of subject timing data, perform group level analyses
grp = get_subject_policy_changes_over_time(subj, grp)
subj, grp, summary = analyze_subjects(subj, grp)

# Apply all quality controls in a first pass
subj, grp = quality_controls(subj, grp, plot=False, thresh=3, drop=True)

# Recompute PCs
subj, grp, summary = analyze_subjects(subj, grp)

#---------------------------------  Plots and Statistics -----------------------------------#
if make_plots:

    # Figure 1    
    plot_reward_rate_conds(fname='fig-1b-reward_rates')             # Condition instantaneous rates
    plot_reward_cumulative_conds(fname='fig-1c-reward_cumulative')  # Condition cumulative rates
    
    # Figure 2
    plot_durations(grp, fname='fig-2a')                 # Subject durations by condition
    plot_avg_dur_vs_reward(grp, fname='fig-2b')         # Average duration vs reward
    plot_avg_lat_vs_reward(grp, fname='fig-2c')
    plot_exits(grp, fname='fig-2d')                     # Subject durations by condition
    plot_exit_devs(grp, fname='fig-2e')                 # Subject durations for best minus those for mid, and mid-worst
    plot_exit_diff_by_thresh(grp, fname='fig-2f')       # Exit differences by threshold

    # Figure 3
    plot_both_ve(grp, fname='fig-3a')                   # VE plots for duration and exit threshold PCAs
    plot_stay_pca(summary, type='dur' , fname='fig-3b')
    plot_stay_pca(summary, type='exit', fname='fig-3c')
    plot_policy_sweep_heatmap(grp, fname='fig-3d')
    plot_dur_vs_exit(grp, fname='fig-3e')
    plot_dur_pc_scores(grp, fname='fig-3f')
    
    # Figure 4
    plot_pcs_by_time(summary, pc='pc1', fname='fig-4a')             # PC1 scores by time
    plot_pcs_by_time(summary, pc='pc2', fname='fig-4b')             # PC2 scores by time
    plot_exit_devs_by_time(summary, fname='fig-4c')                 # Exit deviations by time
    plot_pc_scores_by_time(grp, pc='pc1', fname='fig-4d')           # PC scores by time
    plot_pc_scores_by_time(grp, pc='pc2', fname='fig-4e')           # PC scores by time
    plot_exit_dev_corrs_by_time(grp, fname='fig-4f')                # Exit deviations by time

    # Figure 5 (panels 1-6)
    plot_policy_prediction_lms(grp, save_figs=True)

    # Figure 6
    plot_durations(grp, by_age=True, scatter=False, fname='fig-6a')
    plot_pooled_stay_durations_by_age(grp, fname='fig-6b')
    plot_pc_scores_by_age(grp, fname='fig-6c')
    plot_offset_and_scale_by_time_and_age(grp, var='dur', t0='h0', t1='h1', item='offset', fname='fig-6d')
    plot_offset_and_scale_by_time_and_age(grp, var='dur', t0='h0', t1='h1', item='scale', fname='fig-6e')
    plot_policy_prediction_lms_without_residualizing_age(grp, fname='fig-6f')

    # Supplementary T-test tables
    # T-test table for age differences in exogenous variables
    vars = ['age', 'aes_score', 'phq_score', 'tol_acc', 'tol_rtc_med', 'rtt_rt_med']
    excl = np.where(~grp['exg_qc'])[0]
    droplist = plot_group_ttest_table(grp, vars, excl, fname='table-1')

    # Drop subjects failing exogenous quality controls
    vars = ['hl_exit_avg', 'll_exit_avg', 'hh_exit_avg', 'lh_exit_avg', 'exit_avg_diff', 'dur_avg_diff',
            'dur_avg_pc1_score', 'dur_avg_pc2_score', 'exit_avg_pc1_score', 'exit_avg_pc2_score',
            'dur_avg_offset', 'dur_avg_scale',
            'dur_h0_offset', 'dur_h1_offset', 'dur_h0_scale', 'dur_h1_scale']
    droplist = plot_group_ttest_table(grp, vars, excl=[], fname='table-2')

    # Orphans
    #plot_lme_of_stay_by_age_and_decay_rate(subj, grp, droplist, type='dur')

    # GLM of offset ~ time (first vs. second half)  + age + age*time + (1 | subject)
    plot_lme_of_offset_by_split_half_and_age(grp)

    

    # Arrange figure panels into combined figures for publication
    panels = ['a', 'b', 'c', 'd', 'e', 'f']
    prefix = './figs/fig-'
    for i in range(1, 6):
        fignum = str(i)
        combine_svgs(
            [prefix + fignum + panel + '.svg' for panel in panels],
            out_path='./figs/fig-'+fignum+'.svg',
            ncols=3, nrows=2
        )